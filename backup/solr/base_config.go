package solr

import (
	"fmt"
	"io/ioutil"
	"path/filepath"
)

//*would* have used serialization, but solr xml schema is weird, it would have been more cumbersome
type XML struct {
	MaxBooleanClauses   string
	SolrCloud           *CloudXML
	ShardHandlerFactory *ShardHandlerFactoryXML
}
type CloudXML struct {
	Host                     string
	HostPort                 string
	HostContext              string
	GenericCoreNodeNames     string
	ZkClientTimeout          string
	DistribUpdateSoTimeout   string
	DistribUpdateConnTimeout string
	ZkCredentialsProvider    string
	ZkACLProvider            string
}
type ShardHandlerFactoryXML struct {
	SocketTimeout   string
	ConnTimeout     string
	ShardsWhitelist string
}

const XMLFmtString = "<!-- generated by solr-snapshot-service -->\n" +
	"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n" +
	"<solr>\n" +
	"	<int name=\"maxBooleanClauses\">%s</int>\n" +
	"	<solrcloud>\n" +
	"		<str name=\"host\">%s</str>\n" +
	"		<int name=\"hostPort\">%s</int>\n" +
	"		<str name=\"hostContext\">%s</str>\n" +
	"		<bool name=\"genericCoreNodeNames\">%s</bool>\n" +
	"		<int name=\"zkClientTimeout\">%s</int>\n" +
	"		<int name=\"distribUpdateSoTimeout\">$%s</int>\n" +
	"		<int name=\"distribUpdateConnTimeout\">%s</int>\n" +
	"		<str name=\"zkCredentialsProvider\">%s</str>\n" +
	"		<str name=\"zkACLProvider\">%s</str>\n" +
	"	</solrcloud>\n" +
	"	<shardHandlerFactory name=\"shardHandlerFactory\" class=\"HttpShardHandlerFactory\">\n" +
	"		<int name=\"socketTimeout\">%s</int>\n" +
	"		<int name=\"connTimeout\">%s</int>\n" +
	"		<str name=\"shardsWhitelist\">%s</str>\n" +
	"	</shardHandlerFactory>\n" +
	"</solr>\n"

var DefaultXML = XML{
	MaxBooleanClauses: "${solr.max.booleanClauses:1024}",
	SolrCloud: &CloudXML{
		Host:                     "${host:}",
		HostPort:                 "${jetty.port:8983}",
		HostContext:              "${hostContext:solr}",
		GenericCoreNodeNames:     "${genericCoreNodeNames:true}",
		ZkClientTimeout:          "${zkClientTimeout:30000}",
		DistribUpdateSoTimeout:   "${distribUpdateSoTimeout:600000}",
		DistribUpdateConnTimeout: "${distribUpdateConnTimeout:60000}",
		ZkCredentialsProvider:    "${zkCredentialsProvider:org.apache.solr.common.cloud.DefaultZkCredentialsProvider}",
		ZkACLProvider:            "${zkACLProvider:org.apache.solr.common.cloud.DefaultZkACLProvider}",
	},
	ShardHandlerFactory: &ShardHandlerFactoryXML{
		SocketTimeout:   "${socketTimeout:600000}",
		ConnTimeout:     "${connTimeout:60000}",
		ShardsWhitelist: "${solr.shardsWhitelist:}",
	},
}

func (xml *XML) Generate() string {
	return fmt.Sprintf(XMLFmtString, xml.MaxBooleanClauses, xml.SolrCloud.Host, xml.SolrCloud.HostPort, xml.SolrCloud.HostContext,
		xml.SolrCloud.GenericCoreNodeNames, xml.SolrCloud.ZkClientTimeout, xml.SolrCloud.DistribUpdateSoTimeout,
		xml.SolrCloud.DistribUpdateConnTimeout, xml.SolrCloud.ZkCredentialsProvider, xml.SolrCloud.ZkACLProvider,
		xml.ShardHandlerFactory.SocketTimeout, xml.ShardHandlerFactory.ConnTimeout, xml.ShardHandlerFactory.ShardsWhitelist)
}

type ZooCfg struct {
	TickTime          int
	InitLimit         int
	SyncLimit         int
	AdminEnableServer bool
}

const ZooCfgFmtString = "#generated by solr-snapshot-service\n" +
	"tickTime=%d\n" +
	"initLimit=%d\n" +
	"syncLimit=%d\n" +
	"admin.enableServer=%t\n"

var DefaultZooCfg = ZooCfg{
	TickTime:          2000,
	InitLimit:         10,
	SyncLimit:         5,
	AdminEnableServer: false,
}

func (zooCfg *ZooCfg) Generate() string {
	return fmt.Sprintf(ZooCfgFmtString, zooCfg.TickTime, zooCfg.InitLimit, zooCfg.SyncLimit, zooCfg.AdminEnableServer)
}
func WriteDefaultBaseConfig(dataPath string) error {
	err := ioutil.WriteFile(filepath.Join(dataPath, "solr.xml"), []byte(DefaultXML.Generate()), 0777)
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(filepath.Join(dataPath, "zoo.cfg"), []byte(DefaultZooCfg.Generate()), 0777)
	if err != nil {
		return err
	}
	return nil
}
